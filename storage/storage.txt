Storage
=======

:Revision: $Id$
:Author: Tarek Ziadé

TODO: remove the from `Products.BayesCore` dependency in the tests.

Le module storage est en charge de fournir une interface
de lecture et d'écriture pour le contenu bayesien.

Il se base sur une interface relativement simple et propose
une architecture pluggable pour pouvoir implémenter
tout type de backends.

L'interface est la suivante::

  >>> from Products.BayesCore.storage.interfaces import IBayesStorage

Elle définie les apis à implémenter pour le backend.

L'implémentation utilisée par défaut sera un backend MySQL mais
un backend ZODB est également proposé.

C'est celui-ci qui est présenté dans le doctest::

  >>> from zope.interface.verify import verifyClass
  >>> from Products.BayesCore.storage.zodb import ZODBBayesStorage

`verifyClass` vérifie que les implémentations et l'interface évoluent
toujours en accord::

  >>> verifyClass(IBayesStorage, ZODBBayesStorage)
  True
  >>> backend = ZODBBayesStorage()
  >>> IBayesStorage.providedBy(backend)
  True
  >>> backend.getStorageType()
  'zodb'

Le storage permet de gérer les langues::

  >>> backend.addLanguage(u'fr', u'français')
  >>> backend.addLanguage(u'en', u'english')
  >>> backend.addLanguage(u'de', u'deutsch')
  >>> langs = list(backend.listLanguages())
  >>> langs.sort()
  >>> langs
  [u'de', u'en', u'fr']
  >>> backend.getLanguage('fr')
  u'fran\xe7ais'
  >>> backend.delLanguage('fr')
  >>> langs = list(backend.listLanguages())
  >>> langs.sort()
  >>> langs
  [u'de', u'en']

Les mots, en gérant un nombre d'occurences pour chaque::

  >>> backend.addWord('pain', 'fr', ('boulangerie', 'repas'))
  >>> list(backend.listWords('fr'))
  ['pain']
  >>> backend.getWord('pain')
  (('fr',), {'repas': 1, 'boulangerie': 1}, 2)
  >>> backend.addWord('pain', 'fr', 'boursin')
  >>> backend.getWord('pain')
  (('fr',), {'repas': 1, 'boursin': 1, 'boulangerie': 1}, 3)
  >>> list(backend.listWords(complete=True))
  [('pain', (('fr',), {'repas': 1, 'boursin': 1, 'boulangerie': 1}, 3))]
  >>> backend.delWord('pain')
  >>> list(backend.listWords('fr'))
  []

Et enfin les catégories::

  >>> backend.addCategory('boulangerie', 'La Boulange',
  ...                     'toute ce qui a attrait au pain')
  >>> list(backend.listCategories())
  ['boulangerie']
  >>> backend.getCategory('boulangerie')
  ('La Boulange', 'toute ce qui a attrait au pain')
  >>> backend.delCategory('boulangerie')
  >>> list(backend.listCategories())
  []

Un mécanisme de registering facilite l'utilisation du paquet::

  >>> from Products.BayesCore.storage.register import getStorage
  >>> storage = getStorage('zodb')
  >>> isinstance(storage, ZODBBayesStorage)
  True
